name,ring,quadrant,isNew,description
Cypress,Adopt,Dependencies,FALSE,
JavaScript,Adopt,Dependencies,FALSE,
NPM,Adopt,Dependencies,FALSE,
PHP,Adopt,Dependencies,FALSE,
Symfony,Adopt,Dependencies,FALSE,
Vue,Adopt,Dependencies,FALSE,
Webpack,Adopt,Dependencies,FALSE,
Aleph.js,Assess,Dependencies,TRUE,"<p>There is certainly no shortage of frameworks to build web applications in JavaScript/<a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a>. We've featured many of them in the Radar, but what sets <strong><a href=""https://alephjs.org/docs"">Aleph.js</a></strong> apart in this crowded field is that it's built to run on <a href=""/radar/platforms/deno"">Deno</a>, the new server-side run time created by the original developer of <a href=""/radar/platforms/node-js"">Node</a>. This puts Aleph.js on a modern foundation that addresses several shortcomings and problems with Node. Aleph.js is still new — it’s approaching the 1.0 release at the time of writing — but it already offers a solid developer experience, including hot module replacement. With Deno now way past its <a href=""https://deno.com/blog/v1"">1.0 release</a>, this is a modern choice for projects that can take the risk.</p>"
Asset Mapper,Assess,Dependencies,TRUE,
Astro,Assess,Dependencies,TRUE,"<p>It's hard to believe, but in 2022, the developer community continues to pump out interesting new frameworks for building web applications. <strong><a href=""https://astro.build/"">Astro</a></strong> is a recent, open-source, multi-page application framework that renders HTML on the server and minimizes the amount of JavaScript sent over the wire. Astro seems particularly well-suited to content-oriented websites that pull from many different sources. We like the fact that although Astro encourages sending only HTML, it still supports — when appropriate — select active components written in the front-end JavaScript framework of your choice. It does this through its <a href=""https://mainawycliffe.dev/blog/island-architecture/"">island architecture</a>. Islands are regions of interactivity within a single page where the necessary JavaScript is downloaded only when needed. Astro is relatively new but seems to support a growing ecosystem of developers and code. It's one to watch as it develops.</p>"
Cloudscape,Assess,Dependencies,TRUE,"<p><strong><a href=""https://cloudscape.design/"">Cloudscape</a></strong> is an open-source design system that not only has a rich set of components but also 35 interaction and content representation patterns. In addition, it uses <a href=""/radar/techniques/design-tokens"">design tokens</a> for theming and provides element wrappers for all components, which greatly simplifies unit testing. This makes it stand out from other design systems out there.</p>"
Cypress Component Testing,Assess,Dependencies,TRUE,"<p><a href=""https://docs.cypress.io/guides/component-testing/writing-your-first-component-test""><strong>Cypress Component Testing</strong></a> provides a testable component workbench to quickly build and test UI components. You can write component visual regression tests with the same API that you write end-to-end (E2E) UI tests. Although still in beta, component testing will be the most important feature in <a href=""/radar/tools/cypress"">Cypress</a> 10.</p>"
Flowbite,Assess,Dependencies,TRUE,
HTMX,Assess,Dependencies,TRUE,
io-ts,Assess,Dependencies,FALSE,"<p>Our teams developing in <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> are finding <strong><a href=""https://gcanti.github.io/io-ts/"">io-ts</a></strong> invaluable, especially when interacting with APIs that ultimately result in the creation of objects with specific types. When working with TypeScript, getting data into the bounds of the type system (i.e., from the aforementioned APIs) can lead to run-time errors that can be hard to find and debug. io-ts bridges the gap between compile-time type checking and run-time consumption of external data by providing encode and decode functions. Given the experiences of our teams and the elegance of its approach, we think io-ts is worth adopting.</p>"
Mercure,Assess,Dependencies,TRUE,
NestJS,Assess,Dependencies,FALSE,"<p>In the past, we've cautioned about <a href=""/radar/platforms/node-overload"">Node overload</a>, and we're still cautious about the reasons to choose it. However, in scenarios where Node.js is required to build back-end applications, our teams are reporting that <strong><a href=""https://nestjs.com/"">NestJS</a></strong> is a suitable option to enable developers to create testable, scalable, loosely coupled and easily maintainable applications in enterprises. NestJS is a <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a>-first framework that makes the development of Node.js applications safer and less error-prone. NestJS is opinionated and comes with SOLID principles and an <a href=""/radar/languages-and-frameworks/angular"">Angular</a>-inspired architecture out of the box.</p>"
React Query,Assess,Dependencies,FALSE,"<p><a href=""https://react-query-v3.tanstack.com/""><strong>React Query</strong></a> is often described as the missing data-fetching library for <a href=""/radar/languages-and-frameworks/react-js"">React</a>. Fetching, caching, synchronizing and updating server state is a common requirement in many React applications, and although the requirements are well understood, getting the implementation right is notoriously difficult. React Query provides a straightforward solution using hooks. It works hand-in-hand with existing async data-fetching libraries like <a href=""/radar/tools/axios"">axios</a>, <a href=""/radar/languages-and-frameworks/fetch"">Fetch</a> and <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> since they are built on promises. As an application developer, you simply pass a function that resolves your data and leave everything else to the framework. We like that it works out of the box but still offers a lot of configuration when needed. The developer tools, unfortunately not yet available for <a href=""/radar/languages-and-frameworks/react-native"">React Native</a>, also help developers new to the framework understand how it works. For React Native, you can use a <a href=""https://github.com/bgaleotti/react-query-native-devtools"">third-party developer tools plugin</a> utilizing <a href=""/radar/tools/flipper"">Flipper</a>. In our experience, version 3 of React Query brought the stability needed to be used in production with our clients.</p>"
Svelte,Assess,Dependencies,FALSE,"<p>Among web component frameworks, <strong><a href=""https://svelte.dev/"">Svelte</a></strong> stands out by moving reactivity out of the browser and into the compiler. Instead of optimizing DOM updates by using a virtual DOM and browser optimization tricks, Svelte compiles your code into vanilla framework-less JavaScript code that surgically updates the DOM directly. In addition to the run-time performance benefits, this also allows Svelte to optimize the amount of code the browser has to download without sacrificing features for developers; moreover, it's proven to be performant and battery-friendly for mobile web applications as less code has to execute in the browser itself. Performance benefits aside, our teams have appreciated its friendly learning curve and the maintenance benefits that come from <a href=""https://svelte.dev/blog/write-less-code"">writing less code</a>. Svelte itself is only the component framework, but <a href=""https://kit.svelte.dev/"">SvelteKit</a> adds features to build full web applications.</p>"
Gulp,Hold,Dependencies,FALSE,
Panther,Trial,Dependencies,TRUE,<p>Cypress does a good job but it does mean we have to jump out of PHP into a separate test runner and language to test controllers coded in PHP. Panther allows us to do web-based e2e tests via PHP. This won't necessarily completely replace Cypress but ideally it would do the bulk of the lifting.</p>
Tailwind,Trial,Dependencies,TRUE,
Turbo,Trial,Dependencies,TRUE,
TypeScript,Trial,Dependencies,FALSE,
ZenStruck Foundry,Trial,Dependencies,TRUE,"<p>The Arrange step of automated tests can get hairy with the need to maintain test fixtures to represent the various entities used to elicite behaviour we want to Assert. With Foundry, we can more easily create these entities via code so we no longer need to maintain 1-1 mappings between entities & fixtures and can stay in PHP-code headspace when generating the Act portion of tests, keeping those details closer to the test level as opposed to abstracted out in a JSON file.</p>"
Confluence,Adopt,Platforms,TRUE,
Docker,Adopt,Platforms,FALSE,
Drupal,Adopt,Platforms,FALSE,
GitHub,Adopt,Platforms,FALSE,
JIRA,Adopt,Platforms,TRUE,
MDM,Adopt,Platforms,TRUE,<p>Mobile device management (MDM) is a proven methodology and toolset used to provide a workforce mobile productivity tools and applications while keeping corporate data secure.</p>
MySQL,Adopt,Platforms,FALSE,
RapidKit,Adopt,Platforms,TRUE,"<p>A Drupal starter kit to kick off CMS backed sites. Basic tooling, config, modules, and a default theme will come pre-packaged.</p>"
Backstage,Assess,Platforms,TRUE,"<p>In an increasingly digital world, improving developer effectiveness in large organizations is often a core concern of senior leaders. We've seen enough value with developer portals in general and <strong><a href=""https://backstage.io/"">Backstage</a></strong> in particular that we're happy to recommend it in Adopt. Backstage is an open-source developer portal platform created by Spotify that improves discovery of software assets across the organization. It uses Markdown <a href=""https://backstage.io/docs/features/techdocs/techdocs-overview"">TechDocs</a> that live alongside the code for each service, which nicely balances the needs of centralized discovery with the need for distributed ownership of assets. Backstage supports software templates to accelerate new development and a plugin architecture that allows for extensibility and adaptability into an organization's infrastructure ecosystem. <a href=""https://backstage.io/docs/features/software-catalog/software-catalog-overview"">Backstage Service Catalog</a> uses YAML files to track ownership and metadata for all the software in an organization's ecosystem; it even lets you track third-party SaaS software, which usually requires tracking ownership.</p>"
Cloud Envs for Local,Assess,Platforms,TRUE,devzero.io
Colima,Assess,Platforms,FALSE,"<p><strong><a href=""https://github.com/abiosoft/colima"">Colima</a></strong> is becoming a popular open alternative to Docker Desktop. It provisions the <a href=""/radar/platforms/docker"">Docker</a> container run time in a Lima VM, configures the Docker CLI on macOS and handles port-forwarding and volume mounts. Colima uses <a href=""https://containerd.io/"">containerd</a> as its run time, which is also the run time on most managed <a href=""/radar/platforms/kubernetes"">Kubernetes</a> services — improving the important dev-prod parity. With Colima you can easily use and test the latest features of containerd, such as lazy loading for container images. We've been having good results with Colima in our projects. When in the Kubernetes space, we also use <a href=""https://github.com/containerd/nerdctl"">nerdctl</a>, a Docker-compatible CLI for containerd. Since Kubernetes has deprecated Docker as container run time and most managed-services (EKS, GKE, etc) are following its lead, more people will be looking to containerd native tools, hence the importance of tools like nerdctl. In our opinion, Colima is realizing its strong potential and becoming a go-to option as an alternative to Docker Desktop.</p>"
GitHub CodeSpaces,Assess,Platforms,TRUE,
Kentico (or +X),Assess,Platforms,FALSE,
Terraform,Assess,Platforms,TRUE,
Vercel,Assess,Platforms,TRUE,
Acquia,Trial,Platforms,TRUE,
Design System,Trial,Platforms,TRUE,
Pantheon,Trial,Platforms,FALSE,"<p>Pantheon speeds environment setup, simplifies deploys, and enables better multi-site architecture with a shared codebase that can be pushed down to multiple sites</p>"
Zu Demo Site,Trial,Platforms,TRUE,
Automated Tests,Adopt,Techniques,TRUE,"<p>While we do write (and run) automated tests, we don't often have the level of coverage that brings full confidence in our ability to confirm functionality and make us feel safe in refactorings or introducing new features. We will set a new benchmark on what level of coverage we want as well as clear definitions on what sort of tests (unit, functional, integration, e2e) we want to utilize to achieve this coverage level</p>"
Career Paths,Adopt,Techniques,TRUE,
Tech Diagrams,Adopt,Techniques,TRUE,
Template Repositories,Adopt,Techniques,FALSE,"<p>Successfully kickstarting a project means not having to worry about the setup. To this end, we have templates for new Symfony as well as new Drupal projects (see RapidKit for more details on the latter) to start new projects more quickly and with a common set of tools and modules so we don't need to think about what to install. We just need to think of what we need to develop</p>"
User Stories,Adopt,Techniques,TRUE,
Zero trust security for CI/CD,Adopt,Techniques,TRUE,"<p>If not properly secured, the infrastructure and tools that run our build and delivery pipelines can become a big liability. Pipelines need access to critical data and systems like source code, credentials and secrets to build and deploy software. This makes these systems very inviting to malicious actors. We therefore highly recommend applying <strong><a href=""/radar/techniques/zero-trust-architecture"">zero trust</a> security for CI/CD</strong> pipelines and infrastructure — trusting them as little as necessary. This encompasses a number of techniques: If available, authenticate your pipelines with your cloud provider via federated identity mechanisms like OIDC, instead of giving them direct access to secrets. Implement the principle of least privilege by minimizing the access of individual user or runner accounts, rather than employing ""god user accounts"" with unlimited access. Use your runners in an ephemeral way instead of reusing them, to reduce the risk of exposing secrets from previous jobs or running jobs on compromised runners. Keep the software in your agents and runners up to date. Monitor the integrity, confidentiality and availability of your CI/CD systems the same way you would monitor your production software.</p>

<p>We're seeing teams forget about these types of practices particularly when they’re used to working with a self-managed CI/CD infrastructure in internal network zones. While all of these practices are important in your internal networks, they become even more crucial when using a managed service, as that extends the attack surface and blast radius even more.</p>"
Accessibility annotations in designs,Assess,Techniques,TRUE,"<p>The earlier accessibility is considered in software delivery, the easier and cheaper it is to ensure what's built works for as many people as possible. Tools that help communicate <strong>accessibility annotations in designs</strong> help teams consider important elements like document structure, semantic HTML and alternative texts from the beginning of their work. This enables them to ensure user interfaces meet global accessibility standards and address common failures that are actually fairly easy to avoid. <a href=""/radar/tools/figma"">Figma</a> offers a range of accessibility notation plugins: <a href=""https://www.figma.com/community/file/953682768192596304"">The A11y Annotation Kit</a>, Twitter's <a href=""https://www.figma.com/community/file/976946194228458698"">Accessibility Annotation Library</a> and the Axe toolset's <a href=""https://www.figma.com/community/plugin/1085612091163821851/Axe-for-Designers-(FREE)"">Axe for Designers</a>.</p>"
Autonomy,Assess,Techniques,TRUE,
CUPID,Assess,Techniques,TRUE,"<p>How do you approach writing good code? How do you judge if you've written good code? As software developers, we're always looking for catchy rules, principles and patterns that we can use to share a language and values with each other when it comes to writing simple, easy-to-change code.</p><p>Daniel Terhorst-North has recently made a new attempt at creating such a checklist for good code. He argues that instead of sticking to a set of rules like <a href=""https://en.wikipedia.org/wiki/SOLID"">SOLID</a>, using a set of properties to aim for is more generally applicable. He came up with what he calls the <strong><a href=""https://dannorth.net/2022/02/10/cupid-for-joyful-coding/"">CUPID</a></strong> properties to describe what we should strive for to achieve ""joyful"" code: Code should be composable, follow the Unix philosophy and be predictable, idiomatic and domain based.</p>"
Design tokens,Assess,Techniques,TRUE,"<p>When faced with the challenge of using a <a href=""/radar/techniques/design-systems"">design system</a> consistently across many form factors and platforms, the team at Salesforce came up with the concept of <strong><a href=""https://medium.com/salesforce-ux/living-design-system-3ab1f2280ef7#.r26jko9u3"">design tokens</a></strong>. The tokens store values, such as colors and fonts, in one central place. This makes it possible to <a href=""https://medium.com/eightshapes-llc/tokens-in-design-systems-25dd82d58421"">separate options from decisions</a>, and it significantly improves <a href=""https://uxdesign.cc/design-tokens-for-dummies-8acebf010d71"">collaboration between teams</a>. Design tokens are not new, but with the introduction of tools like <a href=""/radar/languages-and-frameworks/tailwind-css"">Tailwind CSS</a> and <a href=""https://amzn.github.io/style-dictionary/#/"">Style Dictionary</a>, we see design tokens being used more often.</p>"
Drupal Contributions,Assess,Techniques,TRUE,
Feature Flags,Assess,Techniques,TRUE,
Flow,Assess,Techniques,TRUE,
git-together,Assess,Techniques,TRUE,"<p>We're always looking for ways to remove small frictions from pair programming, which is why we're excited by <a href=""https://github.com/kejadlen/git-together""><strong>git-together</strong></a>, a tool written in Rust that simplifies git commit attribution during pairing. By aliasing <code>git-together</code> as <code>git</code>, the tool allows you to add extensions to <code>git config</code> that capture committer information, aliasing each committer by their initials. Changing pairs (or switching to soloing or mob programming) requires you to run <code>git with</code>, followed by the initials of the pair (for example: <code>git with bb cc</code>), allowing you to resume your regular git workflow afterward. Every time you commit, git-together will rotate through the pair as the official author that git stores, and it will automatically add any other authors to the bottom of the commit message. The configuration can be checked in with the repo, allowing git-together to work automatically after cloning a repo.</p>"
Headless CMS,Assess,Techniques,TRUE,
Hypermedia,Assess,Techniques,TRUE,
Path-to-production mapping,Assess,Techniques,TRUE,"<p>Although <strong>path-to-production mapping</strong> has been a near-universal practice at Thoughtworks since codifying <em><a href=""https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912"">Continuous Delivery</a></em>, we often come across organizations unfamiliar with the practice. The activity is most often done in a workshop with a cross-functional group of people ‚Äî  that includes everyone involved in designing, developing, releasing and operating the software ‚Äî around a shared whiteboard (or virtual equivalent). First, the steps in the process are listed in order, from the developer workstation all the way to production. Then, a facilitated session is used to capture further information and pain points. The most common technique we see is based on <a href=""https://en.wikipedia.org/wiki/Value-stream_mapping"">value-stream mapping</a>, although plenty of <a href=""https://caroli.org/en/path-to-production/"">process map</a> variants are equally valuable. The activity is often eye-opening for many of the participants, as they identify delays, risks and inconsistencies and continue to use the visual representation for the continuous improvement of the build and deploy process. We consider this technique so foundational that we were surprised to discover we hadn't blipped it before.</p>"
Software Bill of Materials,Assess,Techniques,TRUE,"<p>With continued pressure to keep systems secure and no reduction in the general threat landscape, a machine-readable <strong>Software Bill of Materials</strong> (SBOM) may help teams stay on top of security problems in the libraries that they rely on. Since the original <a href=""https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/"">Executive Order</a> was published, the industry has gained clarity and understanding of what an SBOM is and how to create one; the National Institute of Standards and Technology (NIST), for example, now has more <a href=""https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1"">specific advice</a> on how to comply with the order. We've had production experience using SBOMs on projects ranging from small companies to large multinationals and even government departments, and we're convinced they provide a benefit. More organizations and governments should consider requiring SBOMs for the software they use. The technique will be strengthened by the new tools that continue to emerge, such as the <a href=""https://firebase.google.com/docs/android/learn-more#bom"">Firebase Android BOM</a> that automatically aligns an application's library dependencies to those listed in the BOM.</p>"
TDD,Assess,Techniques,TRUE,
Team cognitive load,Assess,Techniques,TRUE,"<p>Team interaction is a key concept when redesigning an organization for business agility and speed. These interactions will be reflected in the software being built (see <a href=""https://www.thoughtworks.com/about-us/news/2021/latest-thoughtworks-technology-radar-proclaims---embrace-conway-"">Conway's Law</a>) and indicate how effectively teams can autonomously deliver value to their customers. Our advice is to be intentional about how teams are designed and how they interact. Because we believe that organizational design and team interactions evolve over time, we think it's particularly important to measure and keep track of the <strong>team cognitive load</strong>, which indicates how easy or difficult teams find building, testing and maintaining their services. We've been using a <a href=""https://github.com/TeamTopologies/Team-Cognitive-Load-Assessment"">template</a> to assess team cognitive load that is based on ideas by the authors of the <em><a href=""https://teamtopologies.com/book"">Team Topologies</a></em> book.</p>"
Tracking health over debt,Assess,Techniques,TRUE,"<p>Tracking technical debt is a perennial topic in software delivery organizations. What is <a href=""https://martinfowler.com/bliki/TechnicalDebt.html"">technical debt</a> and what is not? How do you prioritize it? And most importantly, how do you express the value of paying it off to your internal stakeholders? Following the Agile Manifesto’s manner of reasoning — ""while there is value in the item on the right, we value the item on the left more"" — we like the idea of <strong>tracking health over debt</strong>. The folks at REA in Australia share a good <a href=""https://www.rea-group.com/about-us/news-and-insights/blog/what-good-software-looks-like-at-rea/"">example</a> of what such health tracking can look like. They track system ratings in the categories of development, operations and architecture.</p>

<p>Focusing on health instead of debt is a more constructive framing. It connects a team to the ultimate value of reducing debt and helps them prioritize it. Every piece of tackled technical debt should ideally be connectable to one of the agreed expectations. Teams should treat the health rating the same as other service-level objectives (SLOs) and prioritize improvements whenever they drop out of the ""green zone"" for a given category.</p>"
Trunk Based Development,Assess,Techniques,TRUE,
Visibility,Assess,Techniques,TRUE,"<p>In a fast moving workplace, we need quick visibility to data that affects teams - status, metrics, timelines, experiments, documentation. This information should be open and accessible and not just for the team but for anyone curious to see how the team is operating</p>"
Planning for full utilization,Hold,Techniques,TRUE,"<p>While the practice of creating excess capacity in the delivery process is well-known in the <a href=""https://www.amazon.com/Principles-Product-Development-Flow-Generation/dp/1935401009"">product management community</a>, we still see far too many teams <strong>planning for full utilization</strong> of team members. Reserving some capacity during sprint planning generally leads to better predictability <em>and</em> better quality; it promotes team resilience to unexpected events like illnesses, production issues, unexpected product requests and tech debt, while also allowing productive activities like team building and ideation that can lead to product innovation. Running at less than full utilization means teams can be more thoughtful about the robustness of the resulting software and pay closer attention to the right observability signals. Our experience is that a fully utilized team leads to a collapse in throughput as well, just as a fully utilized highway creates slow and demoralizing traffic. For example, when one of our teams had unpredictable support issues, they saw a 25% increase in throughput and a 50% decrease in cycle time volatility by planning feature velocity based on only two of the three developer pairs' capacities.</p>"
Squash Merge,Hold,Techniques,TRUE,
Team-based project silos,Hold,Techniques,TRUE,
Communities of Practice,Trial,Techniques,TRUE,"<p>Change is a social activity. With Communities of Practice, we can encourage open sharing of ideas and demonstrations of knowledge to help drive improvements and keep us all informed and on the cutting edge</p>"
Continuous Deployment,Trial,Techniques,TRUE,
Earlier Tech Involvement,Trial,Techniques,TRUE,
Estimation Enhancements,Trial,Techniques,TRUE,
Experiments,Trial,Techniques,TRUE,
Incremental developer platform,Trial,Techniques,TRUE,"<p>We've been writing about developer platforms and how to build them in almost every edition of the Radar since 2017. In the meantime, the <em><a href=""https://teamtopologies.com/book"">Team Topologies</a></em> book has also done a great job of describing the ideal of a platform that supports developers with ""self-service APIs, tools, services and knowledge."" However, we often see teams shooting for too much of that platform vision too fast. Instead, building an <strong>incremental developer platform</strong> is key.</p>

<p><em>Team Topologies</em> recommends to always strive for what they call the ""Thinnest Viable Platform"" necessary at any given stage, where the first version could even be just a set of documentation on a wiki. The next increment could increase the service level by providing templates or allowing teams to create pull requests. Further increments could then introduce self-service APIs, but only if valuable. In short, even though we've cautioned against fully <a href=""/radar/techniques/ticket-driven-platform-operating-models"">ticket-driven platform operating models</a>, going from zero to self-service is the other extreme. Pace yourself, <a href=""/radar/techniques/applying-product-management-to-internal-platforms"">treat your platform as a product</a> and build it up incrementally.</p>"
Metrics,Trial,Techniques,TRUE,"<p>You can't improve what you can't measure. The DORA metrics have become the gold standard but it need not end there. We want to ensure we focus on how to assess the flow of the company from an operating standpoint beyond billable numbers. We want to see the data that can drive improvements we can directly control, which will flow out to billables at the end</p>"
Onboarding Enhancements,Trial,Techniques,TRUE,
Pairing,Trial,Techniques,TRUE,
Ansible,Adopt,Tools,FALSE,<p>Infrastructure as code solution for provisioning and maintaining servers</p>
BitWarden,Adopt,Tools,FALSE,
GitHub Actions,Adopt,Tools,FALSE,"<p>The options for <strong>CI/CD infrastructure as a service</strong> have become so manifold and mature that the cases in which it's worth managing your entire CI infrastructure yourself are becoming very rare. Using managed services like <a href=""/radar/platforms/github-actions"">GitHub Actions</a>, <a href=""/radar/platforms/azure-devops"">Azure DevOps</a> or <a href=""/radar/platforms/gitlab-ci-cd"">Gitlab CI/CD</a> comes with all the common advantages (and trade-offs) of managed cloud services. You don't have to spend time, effort and hardware costs on maintenance and operations of this often complex infrastructure. Teams can take advantage of elasticity and self-service, whereas provisioning more of the right agents or getting a new plugin or feature are often a bottleneck in companies that host CI themselves. Even the use cases that require to run build and verification on your own hardware can now mostly be covered with self-hosted runners (we've written about some for GitHub Actions, <a href=""/radar/platforms/actions-runner-controller"">actions-runner-controller</a> and the <a href=""/radar/tools/philips-s-self-hosted-github-runner"">Philips's self-hosted GitHub runner</a>). Note, however, that you won’t get out-of-the-box security just because you are using a managed services; while mature services provide all the security features you need, you'll still need to use them to implement <a href=""/radar/techniques/zero-trust-security-for-ci-cd"">zero trust security for your CI/CD</a> infrastructure.</p>"
Grumphp,Adopt,Tools,FALSE,
JIRA Deployment Integration,Adopt,Tools,TRUE,
PHP CS,Adopt,Tools,FALSE,
PHP Stan,Adopt,Tools,FALSE,
AWS Cloud Logs,Assess,Tools,TRUE,
CodeRabbit,Assess,Tools,TRUE,
GitHub Copilot,Assess,Tools,TRUE,"<p><strong><a href=""https://github.com/features/copilot"">GitHub Copilot</a></strong> is an AI coding assistant, created by a collaboration between Microsoft and OpenAI. It uses machine learning models to generate suggestions based on the context of what a developer is working on. It features strong IDE integration and uses an existing codebase and editor context to create suggestions. Despite being billed as ""your AI pair programmer"" we would not call what it does ""pairing"" — we'd probably describe it as a kind of supercharged, context-sensitive Stack Overflow. When it correctly predicts what a developer is trying to do, it can be a powerful tool for getting stuff done. Like all LLM-based AIs, though, it has a tendency to hallucinate the use of plausible but nonexistent APIs and may introduce bugs through slightly faulty algorithms. We've had success generating code at the line, block and method level, as well as creating tests or infrastructure configurations. Interestingly, it works best when you use good naming practices, so it encourages more readable code.</p>

<p>AI tool capabilities are advancing rapidly, and we think it's sensible for organizations to try them. Some sales pitches for Copilot have claimed very high efficiency gains, but we remain skeptical: after all, writing code isn't the only thing that developers spend time on, and it's notoriously difficult to measure developer productivity in the first place. That said, Copilot is a fairly inexpensive tool; if it offers any productivity gain at all, it's probably worth it. <a href=""https://github.com/features/preview/copilot-x"">Copilot X</a> — in preview as of this writing — offers additional functionality and integration within a software creation workflow. Copilot has a <a href=""https://docs.github.com/en/enterprise-cloud@latest/copilot/overview-of-github-copilot/about-github-copilot-for-business"">""for business""</a> offering, which provides more clarity around intellectual property issues as well as the ability to manage tool features centrally across an organization. We think these features are critical for enterprise adoption.</p>"
iamlive,Assess,Tools,TRUE,"<p>Creating exactly the minimum viable AWS IAM policies we want, according to the <a href=""https://en.wikipedia.org/wiki/Principle_of_least_privilege"">principle of least privilege</a>, can be a long journey of trial and error. <strong><a href=""https://github.com/iann0036/iamlive"">iamlive</a></strong> can shorten that journey considerably. It monitors the AWS CLI calls made from a machine and determines the policies needed to execute those calls. The tool generates a policy document with statements, actions, principals and resources that can be used as a good starting point. We've found it particularly useful to create policies needed in CI/CD pipelines that provision infrastructure, reducing the usual back and forth after a <a href=""/radar/tools/terraform"">Terraform</a> run fails because the IAM role's policy is insufficient.</p>"
Obsidian,Assess,Tools,TRUE,"<p>Knowledge management is critical for tech workers, as we need to be constantly learning and staying up to date with the latest technology developments. Recently, tools such as <strong><a href=""https://obsidian.md/"">Obsidian</a></strong> and <a href=""https://logseq.com/"">Logseq</a> have emerged in the category of note-taking tools that support linking notes to form a knowledge graph, while storing them in plain markdown files in a local directory, thus letting users own their data. These tools help users organize and link their notes in a flexible, nonlinear way.</p>

<p>Obsidian has a rich repository of community plugins. Some that have caught our attention, in particular, are <a href=""https://obsidian.md/canvas"">Canvas</a>, akin to a local version of Miro or Mural, and <a href=""https://github.com/blacksmithgu/obsidian-dataview"">Dataview</a>, which effectively treats your notes as a database and provides a query language for filtering, sorting and extracting data from your markdown notes.</p>"
PaperTrail,Assess,Tools,TRUE,Logs?
Capistrano,Hold,Tools,FALSE,<p>Phasing out in favor of GitHub Actions</p>
ChatGPT,Trial,Tools,TRUE,
CyberArk,Trial,Tools,TRUE,
FigJam,Trial,Tools,TRUE,