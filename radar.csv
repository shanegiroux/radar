name,ring,quadrant,isNew,description
git-together,Assess,Techniques,TRUE,"<p>We're always looking for ways to remove small frictions from pair programming, which is why we're excited by <a href=""https://github.com/kejadlen/git-together""><strong>git-together</strong></a>, a tool written in Rust that simplifies git commit attribution during pairing. By aliasing <code>git-together</code> as <code>git</code>, the tool allows you to add extensions to <code>git config</code> that capture committer information, aliasing each committer by their initials. Changing pairs (or switching to soloing or mob programming) requires you to run <code>git with</code>, followed by the initials of the pair (for example: <code>git with bb cc</code>), allowing you to resume your regular git workflow afterward. Every time you commit, git-together will rotate through the pair as the official author that git stores, and it will automatically add any other authors to the bottom of the commit message. The configuration can be checked in with the repo, allowing git-together to work automatically after cloning a repo.</p>"
SLIs and SLOs as code,Assess,Techniques,TRUE,"<p>Since Google first popularized service-level indicators (SLIs) and service-level objectives (SLOs) as part of their site reliability engineering (SRE) practice, observability tools like <a href=""https://docs.datadoghq.com/monitors/service_level_objectives/"">Datadog</a>, <a href=""https://www.honeycomb.io/slos"">Honeycomb</a> and <a href=""https://www.dynatrace.com/news/blog/what-are-slos/"">Dynatrace</a> started incorporating SLO monitoring into their toolchains. <a href=""https://github.com/OpenSLO/OpenSLO"">OpenSLO</a> is an emerging standard that allows defining <strong>SLIs and SLOs as code</strong>, using a declarative, vendor-neutral specification language based on the YAML format used by <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. While the standard is still quite new, we're seeing some encouraging momentum, as with Sumo Logic's contribution of the <a href=""https://github.com/OpenSLO/slogen"">slogen</a> tool to generate monitoring and dashboards. We're excited by the promise of versioning SLI and SLO definitions in code and updating observability tooling as part of the CI/CD pipeline of the service being deployed.</p>"
Local-first application,Assess,Techniques,TRUE,"<p>In a centralized application, the data on the server is the single source of truth — any modification to the data must go through the server. Local data is subordinate to the server version. This seems like a natural and inevitable choice to enable collaboration among multiple users of the software. <strong>Local-first application</strong>, or <a href=""https://www.inkandswitch.com/local-first/#towards-a-better-future"">local-first software</a>, is a set of principles that enables both collaboration and local data ownership. It prioritizes the use of local storage and local networks over servers in remote data centers or the cloud. Techniques like conflict-free replicated data types (CRDTs) and peer-to-peer (P2P) networks have the potential to be a foundational technology for realizing local-first software.</p>"
CUPID,Assess,Techniques,TRUE,"<p>How do you approach writing good code? How do you judge if you've written good code? As software developers, we're always looking for catchy rules, principles and patterns that we can use to share a language and values with each other when it comes to writing simple, easy-to-change code.</p><p>Daniel Terhorst-North has recently made a new attempt at creating such a checklist for good code. He argues that instead of sticking to a set of rules like <a href=""https://en.wikipedia.org/wiki/SOLID"">SOLID</a>, using a set of properties to aim for is more generally applicable. He came up with what he calls the <strong><a href=""https://dannorth.net/2022/02/10/cupid-for-joyful-coding/"">CUPID</a></strong> properties to describe what we should strive for to achieve ""joyful"" code: Code should be composable, follow the Unix philosophy and be predictable, idiomatic and domain based.</p>"
Metrics store,Assess,Techniques,TRUE,"<p><strong><a href=""https://blog.transform.co/data-talks/what-is-a-metrics-store-why-your-data-team-should-define-business-metrics-in-code/"">Metrics store</a></strong>, sometimes referred to as headless business intelligence (BI), is a layer that decouples metrics definitions from their usage in reports and visualizations. Traditionally, metrics are defined inside the context of BI tools, but this approach leads to duplication and inconsistencies as different teams use them in different contexts. By decoupling the definition in the metrics store, we get clear and consistent reuse across BI reports, visualizations and even embedded analytics. This technique is not new; for example, Airbnb introduced <a href=""https://medium.com/airbnb-engineering/airbnb-metric-computation-with-minerva-part-2-9afe6695b486"">Minerva</a> a year ago. However, we're now seeing considerable traction in the data and analytics ecosystem with more tools supporting metrics stores out of the box.</p>"
Team cognitive load,Adopt,Techniques,TRUE,"<p>Team interaction is a key concept when redesigning an organization for business agility and speed. These interactions will be reflected in the software being built (see <a href=""https://www.thoughtworks.com/about-us/news/2021/latest-thoughtworks-technology-radar-proclaims---embrace-conway-"">Conway's Law</a>) and indicate how effectively teams can autonomously deliver value to their customers. Our advice is to be intentional about how teams are designed and how they interact. Because we believe that organizational design and team interactions evolve over time, we think it's particularly important to measure and keep track of the <strong>team cognitive load</strong>, which indicates how easy or difficult teams find building, testing and maintaining their services. We've been using a <a href=""https://github.com/TeamTopologies/Team-Cognitive-Load-Assessment"">template</a> to assess team cognitive load that is based on ideas by the authors of the <em><a href=""https://teamtopologies.com/book"">Team Topologies</a></em> book.</p>"
Path-to-production mapping,Assess,Techniques,TRUE,"<p>Although <strong>path-to-production mapping</strong> has been a near-universal practice at Thoughtworks since codifying <em><a href=""https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912"">Continuous Delivery</a></em>, we often come across organizations unfamiliar with the practice. The activity is most often done in a workshop with a cross-functional group of people —  that includes everyone involved in designing, developing, releasing and operating the software — around a shared whiteboard (or virtual equivalent). First, the steps in the process are listed in order, from the developer workstation all the way to production. Then, a facilitated session is used to capture further information and pain points. The most common technique we see is based on <a href=""https://en.wikipedia.org/wiki/Value-stream_mapping"">value-stream mapping</a>, although plenty of <a href=""https://caroli.org/en/path-to-production/"">process map</a> variants are equally valuable. The activity is often eye-opening for many of the participants, as they identify delays, risks and inconsistencies and continue to use the visual representation for the continuous improvement of the build and deploy process. We consider this technique so foundational that we were surprised to discover we hadn't blipped it before.</p>"
Backstage,Adopt,Platforms,FALSE,"<p>In an increasingly digital world, improving developer effectiveness in large organizations is often a core concern of senior leaders. We've seen enough value with developer portals in general and <strong><a href=""https://backstage.io/"">Backstage</a></strong> in particular that we're happy to recommend it in Adopt. Backstage is an open-source developer portal platform created by Spotify that improves discovery of software assets across the organization. It uses Markdown <a href=""https://backstage.io/docs/features/techdocs/techdocs-overview"">TechDocs</a> that live alongside the code for each service, which nicely balances the needs of centralized discovery with the need for distributed ownership of assets. Backstage supports software templates to accelerate new development and a plugin architecture that allows for extensibility and adaptability into an organization's infrastructure ecosystem. <a href=""https://backstage.io/docs/features/software-catalog/software-catalog-overview"">Backstage Service Catalog</a> uses YAML files to track ownership and metadata for all the software in an organization's ecosystem; it even lets you track third-party SaaS software, which usually requires tracking ownership.</p>"
RapidKit,Adopt,Platforms,,
BitWarden,Adopt,Tools,,
Turbo,Trial,Dependencies,,
Mercure,Assess,Dependencies,,
Tech Diagrams,Adopt,Platforms,,
CoPilot,Assess,Dependencies,,
GitHub Actions,Adopt,Platforms,,
Team Visibility,Assess,Techniques,,Make the invisible visible
Metrics,Trial,Techniques,,
Pairing,Trial,Techniques,,
Trunk Based Development,Assess,Techniques,,
Design System,Trial,Platforms,,
AWS Cloud Logs,Assess,Tools,,
MDM,Adopt,Platforms,,
JIRA Deployment Integration,Adopt,Tools,,
Squash Merge,Hold,Techniques,,
Continuous Deployment,Trial,Techniques,,
Zu Demo Site,Trial,Platforms,,
Automated Testing,Adopt,Techniques,,
Manual Testing,Assess,Techniques,,
Panther,Trial,Dependencies,,
TDD,Assess,Techniques,,
User Stories,Adopt,Techniques,,
Estimation Enhancements,Trial,Techniques,,
HTMX,Assess,Dependencies,,
Earlier Tech Involvement,Adopt,Techniques,,
Project vs Team,Adopt,Techniques,,
Communities of Practice,Trial,Techniques,,Change is a social activity. Share knowledge with others.
Pantheon,Trial,Platforms,,
Terraform,Assess,Platforms,,
ChatGPT,Trial,Tools,,
AI,Assess,Techniques,,
Acquia,Trial,Platforms,,
Feature Flags,Assess,Techniques,,
Onboarding Enhancements,Trial,Techniques,,
Career Paths,Adopt,Techniques,,
IDP,Assess,Platforms,,
Autonomy,Assess,Techniques,,
Asset Mapper,Assess,Dependencies,,
Vercel,Assess,Platforms,,
Speed,Adopt,Techniques,,
Cloud IDE,Assess,Platforms,,
Cloud Envs for Local,Assess,Platforms,,devzero.io
Flow Blockers,Assess,Techniques,,
Experiments,Trial,Techniques,,
PaperTrail,Assess,Tools,,Logs?
FigJam,Trial,Tools,,
CyberArk,Trial,Tools,,
Headless CMS,Assess,Techniques,,
Drupal Contributions,Assess,Techniques,,
Tailwind,Trial,Tools,,
Cypress,Adopt,Dependencies,,
Symfony,Adopt,Dependencies,,
Drupal,Adopt,Platforms,,
Kentico (or +X),Adopt,Platforms,,
GitHub,Adopt,Platforms,,
JIRA,Adopt,Platforms,,
Confluence,Adopt,Platforms,,
BitWarden,Adopt,Tools,,
NPM,Adopt,Dependencies,,
Gulp,Adopt,Dependencies,,
Webpack,Adopt,Dependencies,,
Docker,Adopt,Platforms,,
MySQL,Adopt,Platforms,,
PHP,Adopt,Dependencies,,
JavaScript,Adopt,Dependencies,,
TypeScript,Adopt,Dependencies,,
Template Repo,Adopt,Techniques,,
Grumphp,Adopt,Tools,,
PHPCS,Adopt,Tools,,
Vue,Adopt,Dependencies,,
Agility,Adopt,Techniques,,
Speed,Adopt,Techniques,,
Visibility,Adopt,Techniques,,
Flow,Adopt,Techniques,,